middleware:- it is code that which take incoming req and it modify it before reachingactual route handler
example:-
const customMiddleware = (req,res,next) => {
    console.log("middleware")
    next()
}
app.use(customMiddleware)

app.get('/',(req,res) =>{

    res.send("hello world")

})

1.connct mongodb
2. create User model:-
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
    name :{
        type:String,
        required:true
    },
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    }
})

mongoose.model("User",userSchema);
//////////////////////////////////////////////////////
3.create signup route:-

const express = require("express")
const router = express.Router()
const mongoose = require('mongoose')
const User= mongoose.model("User")
const bcrypt = require("bcryptjs")

router.get('/',(req,res) =>{

})

router.post('/signup',(req,res) =>{
const {name,email,password} = req.body
    if(!email || !password || !name){
        res.status(422).json({error:"please add all the fields"})
    }
    User.findOne({email:email}).then((savedUser) =>{
        if(savedUser){
            res.status(422).json({error:"user already exist"})
        }
        bcrypt.hash(password,12)
            .then(hashedpassword =>{
                const user = new User({
                    email,
                    password:hashedpassword,
                    name
                })
                user.save().then(user =>{
                    res.json({message:"save"})
                }).catch(err =>{
                    console.log(err)

                })
            })

    })
        .catch(err =>{
            console.log(err)
        })
})

module.exports = router

////////////////////////////////////////////


4. create Sign/login route :-
const jwt = require("jsonwebtoken")
const {JWT_SECRETE} = require("../keys")
const requireLogin = require('../middleware/requireLogin')

router.post('/signin',((req, res) => {

    const {email,password} = req.body
    if(!email || !password){
        res.status(422).json({err:"please add all the fields"})
    }
    User.findOne({email:email})
        .then(savedUser =>{
            if(!savedUser){
              return  res.status(422).json({error:"invalid email or password"})
            }
           bcrypt.compare(password,savedUser.password)
               .then(doMatch =>{
                   if(doMatch){
                       //res.json({message:"sucessfully sign in"})
                       //generate token
                       const token = jwt.sign({id:savedUser._id},JWT_SECRETE)
                   res.json({token:token})
                   }
                   else{
                       return  res.status(422).json({error:"invalid email or password"})
                   }
               })
               .catch(err =>{
                   console.log(err)
               })

        })
}))

//creating middleware to verrify token:
middleware/requireLogin.js:-
const jwt = require('jsonwebtoken')
const {JWT_SECRET} = require('../config/keys')
const mongoose = require('mongoose')
const User = mongoose.model("User")
module.exports = (req,res,next)=>{
    const {authorization} = req.headers
    //authorization === Bearer ewefwegwrherhe
    if(!authorization){
        return res.status(401).json({error:"you must be logged in"})
    }
    const token = authorization.replace("Bearer ","")
    jwt.verify(token,JWT_SECRET,(err,payload)=>{
        if(err){
            return   res.status(401).json({error:"you must be logged in"})
        }

        const {_id} = payload
        User.findById(_id).then(userdata=>{
            req.user = userdata
            next()
        })


    })


///////////////////////////////////////////////////
5. create post schema &route:-
const mongoose = require('mongoose')
const {objectId} = mongoose.Schema.Types

const postSchema = new mongoose.Schema({
    title:{
        type:String,
        required:true
    },
    body:{
        type:String,
        required:true
    },
    photo:{
        type:String,
        default:"No Image"
    },
    postedBy:{
        type:objectId,
        ref:"User"
    }
})

mongoose.model("Post",postSchema)


//now route/post.js:-
const express = require("express")
const router = express.Router()
const mongoose = require('mongoose')
const requireLogin = require('../middleware/requireLogin')
const Post = mongoose.model("Post")

//fetchpost
router.get('/allpost',(req,res) =>{
    Post.find()
        //we want person name & id who post it
        .populate("postedBy","_id name")
        .then(posts =>{
            res.json({posts:posts})
        })
        .catch(err =>{
            console.log(err)
        })
})


//createpost
router.post('/createpost',requireLogin,(req,res) =>{
    const {title,body} = req.body
    if(!title || !body){
        res.status(422).json({error:"please add all the fields"})

    }
	// we do not want store password in post section
    req.user.password =undefined

    const post = new Post({
        title,
        body,
        postedBy:req.user
            //middeleware se req.user laya gya
    })
    post.save().then(result =>{
        res.json({post:result})
    }).catch(err =>{
        console.log(err)
    })
})

//fetch all posts of login user
router.get('/mypost',requireLogin,(req,res) =>{
    Post.find({postedBy:req.user._id})
        .populate("postedBy" ,"_id name")
        .then(mypost =>{
            res.json({mypost})
        })
        .catch(err =>{
            console.log(err)
        })
})


module.exports = router
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Implementing Authentication,posts,profile page on client side using react.js




























